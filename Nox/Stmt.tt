﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#
string BaseName = "Stmt";
List<string> StmtGrammar = new List<string>() {
	"Block      : List<Stmt> statements",
	"Class      : Token name, List<Function> methods",
	"Expression : Expr expression",
	"Function   : Token name, List<Token> parameters, List<Stmt> body",
	"If         : Expr condition, Stmt thenBranch, Stmt elseBranch",
	"Print      : Expr expression",
	"Return     : Token keyword, Expr value",
	"Var        : Token name, Expr initializer",
	"While      : Expr condition, Stmt body",
};
#>
// DO NOT MODIFY
// Auto generated by Stmt.tt

using System.Collections.Generic;

namespace Nox {
	public abstract class Stmt {
		public abstract R Accept<R>(IVisitor<R> visitor);

		public interface IVisitor<R> {
		<# foreach (string type in StmtGrammar) { 
			string className = Split(type, ":")[0].Trim(); 
		#>	R Visit<#= className #><#= BaseName #>(<#= className #> <#= BaseName.ToLower() #>);
		<# } #>}

<#
foreach (string type in StmtGrammar) {
	string className = Split(type, ":")[0].Trim();
	string fieldList = Split(type, ":")[1].Trim();
	string[] fields = Split(fieldList, ", ");
#>
		public class <#= className #> : <#= BaseName #> {
			<#
			foreach (string field in fields) {
			#>public readonly <#= field #>;
			<#
			}
			#>
			
			public <#= className #>(<#= fieldList #>) {
			<#
			foreach (string field in fields) {
				string name = Split(field, " ")[1];
			#>	this.<#= name #> = <#= name #>;
			<#
			}
			#>}

			public override R Accept<R>(IVisitor<R> visitor) {
				return visitor.Visit<#= className #><#= BaseName #>(this);
			}
		}

<#
}

#>
	}
}

<#+
public static string[] Split(string s, string separator) {
	return s.Split(new string[] { separator }, StringSplitOptions.RemoveEmptyEntries);
}
#>